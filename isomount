#!/bin/bash

VERSION="00.00.02"
VERSION_DATE="Fri Mar 23 20:20:32 MDT 2018"


MY_NAME=${0##*/}
ME=${ACTION:=$MY_NAME}

MAX_DIRS=20
MNT_DIR="/mnt"

ISO_NAME="iso"
 SQ_NAME="sq"
SQ_FILE="antiX/linuxfs"

SUDO="sudo"
[ $UID -eq 0 ] && SUDO=

main() {

    case $ME in
        isoumount) any_umount "$ISO_NAME"       ;;
         isomount) iso_mount  "$@"              ;;
         squmount) any_umount "$SQ_NAME"        ;;
          sqmount) sq_mount   "$@"              ;;
   clean-isomount) clean "$ISO_NAME" "$SQ_NAME" ;;
    show-isomount)                              ;;
                *) fatal "Unknown program name %s" $ME ;;
    esac

    show_mounts
    exit 0
}

iso_mount() {
    local what=$1
    any_mount "$what" "$ISO_NAME" -o loop,user,ro,exec -t iso9660

}

sq_mount() {
    local what=$1
    any_mount "$what" "$SQ_NAME" -o loop,user,ro,exec -t squashfs
}

any_mount() {
    local what=$1  name=$2  where  n; shift 2

    [ -z "$what" ]  && fatal "Need to say what we should %s"   "$ME"

    test -e "$what" || fatal "Can not find file: %s"           "$what"
    test -f "$what" || fatal "%s does not appear to be a file" "$what"

    for n in $(seq 1 $MAX_DIRS); do
        where=$MNT_DIR/$name$n
        mountpoint -q "$where" || break
    done
    mountpoint -q  "$where" && fatal "Mount point %s and below are already taken" "$where"

    what_lab=$(what_lab "$what")
    ls $MNT_DIR/ | grep -q "@$what_lab"  && fatal "will not mount %s twice" "$white$what$warn_co"

    $SUDO mkdir -p "$where" || fatal "Could not create the directory %s" "$where"
    #echo $SUDO mount "$@" "$what" "$where"
    $SUDO mount "$@" "$what" "$where"
    if ! mountpoint -q "$where"; then
        $SUDO rmdir "$where"
        fatal "Was unable to mount %s" "$* $what $where"
    fi

    say "Mounted %s at %s" "$hi_co$what$m_co" "$hi_co$where$m_co"

    if [ "$name" == "$SQ_NAME" ]; then
        $SUDO touch "$where@$(what_lab "$what")"
    else
        #$SUDO touch "$where@$(basename "$what")"
        $SUDO touch "$where@$(what_lab "$what")"
    fi

    local sq_file=$where/$SQ_FILE
    [ "$name" == "$ISO_NAME" -a -e "$sq_file" ] || return
    sq_mount "$sq_file"
}

any_umount() {
    local name=$1  n  where
	for n in $(seq $MAX_DIRS -1 1); do
		where=$MNT_DIR/$name$n
		mountpoint -q "$where" && break
	done
	mountpoint -q "$where" || fatal "No %s mountpoints found" "$name"

    local sq_file=$where/$SQ_FILE
    local sq_lab=$(what_lab "$sq_file")

    if [ "$name" == "$ISO_NAME" -a -e "$sq_file" ]; then
        for n in $(seq $MAX_DIRS -1 1); do
            local pointer=$MNT_DIR/$SQ_NAME$n@$sq_lab
            test -e $pointer || continue
            local sq_mp=${pointer%%@*}
            mountpoint -q "$sq_mp" && do_umount "$sq_mp"
        done
    fi

    do_umount "$where"
}

do_umount() {
    local where=$1
	$SUDO umount  "$where"
	mountpoint -q "$where" && fatal "Failed to umount %s" "$where"
	$SUDO rmdir   "$where" || fatal "Failed to remove %s directory" "$where"


    local pointer=$(ls $where@*)

    if [ $(ls -a $pointer | wc -l) -eq 1 ] && test -e "$pointer"; then
         local what=/$(echo "${pointer#*@}" | tr - /)
        say "Unmounted %s (%s)" "$hi_co$where$m_co" "$hi_co$what$m_co"
    else
        say "Unmounted %s" "$hi_co$where$m_co"
    fi

	$SUDO rm -f "$where@"*
}

fatal() {
    local fmt=$1 ; shift
    printf "$ME: $warn_co$fmt$nc_co\n" "$@" >&2
    exit 2
}

say() {
    local fmt=$1 ; shift
    printf "$ME: $m_co$fmt$nc_co\n" "$@"
}


what_lab() {
    local what=$(echo "$1" | tr / -)
    echo "${what#-}"
}

show_mounts() {
    local data=$(df -hT | grep -E " $MNT_DIR/($ISO_NAME|$SQ_NAME)[0-9]")
    [ $(echo "$data" | wc -l) -gt 1 ] || return 
    echo
    echo "$data"
}

clean() {
    local name what n
    for name; do
        for n in $(seq 1 $MAX_DIRS); do
            what=$MNT_DIR/$name$n
            mountpoint -q "$what" && continue
            echo "$what"
            test -d "$what" && $SUDO rmdir -f "$what"
            $SUDO rm -f "$what"@*
        done
    done

}

set_colors() {
    local noco=$1  loco=$2

    [ "$noco" ] && return

    local e=$(printf "\e")
     black="$e[0;30m";    blue="$e[0;34m";    green="$e[0;32m";    cyan="$e[0;36m";
       red="$e[0;31m";  purple="$e[0;35m";    brown="$e[0;33m"; lt_gray="$e[0;37m";
   dk_gray="$e[1;30m"; lt_blue="$e[1;34m"; lt_green="$e[1;32m"; lt_cyan="$e[1;36m";
    lt_red="$e[1;31m"; magenta="$e[1;35m";   yellow="$e[1;33m";   white="$e[1;37m";
     nc_co="$e[0m";

    cheat_co=$white;      err_co=$red;       hi_co=$white;
      cmd_co=$white;     from_co=$lt_green;  mp_co=$magenta;   num_co=$magenta;
      dev_co=$magenta;   head_co=$yellow;     m_co=$lt_cyan;    ok_co=$lt_green;
       to_co=$lt_green;  warn_co=$yellow;  bold_co=$yellow;

    [ "$loco" ] || return

    from_co=$brown
      hi_co=$white
       m_co=$nc_co
     num_co=$white
}

set_colors

main "$@"
